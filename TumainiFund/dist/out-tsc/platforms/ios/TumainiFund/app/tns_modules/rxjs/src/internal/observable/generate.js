import { Observable } from '../Observable';
import { identity } from '../util/identity';
import { isScheduler } from '../util/isScheduler';
export function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
    let resultSelector;
    let initialState;
    if (arguments.length == 1) {
        const options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || identity;
        scheduler = options.scheduler;
    }
    else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {
        initialState = initialStateOrOptions;
        resultSelector = identity;
        scheduler = resultSelectorOrObservable;
    }
    else {
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
    }
    return new Observable(subscriber => {
        let state = initialState;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                subscriber,
                iterate,
                condition,
                resultSelector,
                state
            });
        }
        do {
            if (condition) {
                let conditionResult;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            let value;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        } while (true);
        return undefined;
    });
}
function dispatch(state) {
    const { subscriber, condition } = state;
    if (subscriber.closed) {
        return undefined;
    }
    if (state.needIterate) {
        try {
            state.state = state.iterate(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
    }
    else {
        state.needIterate = true;
    }
    if (condition) {
        let conditionResult;
        try {
            conditionResult = condition(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!conditionResult) {
            subscriber.complete();
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
    }
    let value;
    try {
        value = state.resultSelector(state.state);
    }
    catch (err) {
        subscriber.error(err);
        return undefined;
    }
    if (subscriber.closed) {
        return undefined;
    }
    subscriber.next(value);
    if (subscriber.closed) {
        return undefined;
    }
    return this.schedule(state);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wbGF0Zm9ybXMvaW9zL1R1bWFpbmlGdW5kL2FwcC90bnNfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL2dlbmVyYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQThQbEQsTUFBTSxVQUFVLFFBQVEsQ0FBTyxxQkFBZ0QsRUFDaEQsU0FBNEIsRUFDNUIsT0FBd0IsRUFDeEIsMEJBQStELEVBQy9ELFNBQXlCO0lBRXRELElBQUksY0FBZ0MsQ0FBQztJQUNyQyxJQUFJLFlBQWUsQ0FBQztJQUVwQixJQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1FBQ3pCLE1BQU0sT0FBTyxHQUFHLHFCQUE4QyxDQUFDO1FBQy9ELFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3BDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQzlCLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQzFCLGNBQWMsR0FBRyxPQUFPLENBQUMsY0FBYyxJQUFJLFFBQTRCLENBQUM7UUFDeEUsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7S0FDL0I7U0FBTSxJQUFJLDBCQUEwQixLQUFLLFNBQVMsSUFBSSxXQUFXLENBQUMsMEJBQTBCLENBQUMsRUFBRTtRQUM5RixZQUFZLEdBQUcscUJBQTBCLENBQUM7UUFDMUMsY0FBYyxHQUFHLFFBQTRCLENBQUM7UUFDOUMsU0FBUyxHQUFHLDBCQUEyQyxDQUFDO0tBQ3pEO1NBQU07UUFDTCxZQUFZLEdBQUcscUJBQTBC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Y0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMzQztJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUNELElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtRQUNyQixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO1FBQ3JCLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuaW1wb3J0IHsgU2NoZWR1bGVyQWN0aW9uLCBTY2hlZHVsZXJMaWtlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcblxuZXhwb3J0IHR5cGUgQ29uZGl0aW9uRnVuYzxTPiA9IChzdGF0ZTogUykgPT4gYm9vbGVhbjtcbmV4cG9ydCB0eXBlIEl0ZXJhdGVGdW5jPFM+ID0gKHN0YXRlOiBTKSA9PiBTO1xuZXhwb3J0IHR5cGUgUmVzdWx0RnVuYzxTLCBUPiA9IChzdGF0ZTogUykgPT4gVDtcblxuaW50ZXJmYWNlIFNjaGVkdWxlclN0YXRlPFQsIFM+IHtcbiAgbmVlZEl0ZXJhdGU/OiBib29sZWFuO1xuICBzdGF0ZTogUztcbiAgc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxUPjtcbiAgY29uZGl0aW9uPzogQ29uZGl0aW9uRnVuYzxTPjtcbiAgaXRlcmF0ZTogSXRlcmF0ZUZ1bmM8Uz47XG4gIHJlc3VsdFNlbGVjdG9yOiBSZXN1bHRGdW5jPFMsIFQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRlQmFzZU9wdGlvbnM8Uz4ge1xuICAvKipcbiAgICogSW5pdGlhbCBzdGF0ZS5cbiAgICovXG4gIGluaXRpYWxTdGF0ZTogUztcbiAgLyoqXG4gICAqIENvbmRpdGlvbiBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgc3RhdGUgYW5kIHJldHVybnMgYm9vbGVhbi5cbiAgICogV2hlbiBpdCByZXR1cm5zIGZhbHNlLCB0aGUgZ2VuZXJhdG9yIHN0b3BzLlxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCBhIGdlbmVyYXRvciBuZXZlciBzdG9wcy5cbiAgICovXG4gIGNvbmRpdGlvbj86IENvbmRpdGlvbkZ1bmM8Uz47XG4gIC8qKlxuICAgKiBJdGVyYXRlIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBzdGF0ZSBhbmQgcmV0dXJucyBuZXcgc3RhdGUuXG4gICAqL1xuICBpdGVyYXRlOiBJdGVyYXRlRnVuYzxTPjtcbiAgLyoqXG4gICAqIFNjaGVkdWxlckxpa2UgdG8gdXNlIGZvciBnZW5lcmF0aW9uIHByb2Nlc3MuXG4gICAqIEJ5IGRlZmF1bHQsIGEgZ2VuZXJhdG9yIHN0YXJ0cyBpbW1lZGlhdGVseS5cbiAgICovXG4gIHNjaGVkdWxlcj86IFNjaGVkdWxlckxpa2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJhdGVPcHRpb25zPFQsIFM+IGV4dGVuZHMgR2VuZXJhdGVCYXNlT3B0aW9uczxTPiB7XG4gIC8qKlxuICAgKiBSZXN1bHQgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBzdGF0ZSBhbmQgcmV0dXJucyBhIHZhbHVlIHRvIGVtaXQuXG4gICAqL1xuICByZXN1bHRTZWxlY3RvcjogUmVzdWx0RnVuYzxTLCBUPjtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gb2JzZXJ2YWJsZSBzZXF1ZW5jZSBieSBydW5uaW5nIGEgc3RhdGUtZHJpdmVuIGxvb3BcbiAqIHByb2R1Y2luZyB0aGUgc2VxdWVuY2UncyBlbGVtZW50cywgdXNpbmcgdGhlIHNwZWNpZmllZCBzY2hlZHVsZXJcbiAqIHRvIHNlbmQgb3V0IG9ic2VydmVyIG1lc3NhZ2VzLlxuICpcbiAqICFbXShnZW5lcmF0ZS5wbmcpXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+UHJvZHVjZXMgc2VxdWVuY2Ugb2YgMCwgMSwgMiwgLi4uIDksIHRoZW4gY29tcGxldGVzLjwvY2FwdGlvbj5cbiAqIGNvbnN0IHJlcyA9IGdlbmVyYXRlKDAsIHggPT4geCA8IDEwLCB4ID0+IHggKyAxLCB4ID0+IHgpO1xuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlVzaW5nIGFzYXAgc2NoZWR1bGVyLCBwcm9kdWNlcyBzZXF1ZW5jZSBvZiAyLCAzLCA1LCB0aGVuIGNvbXBsZXRlcy48L2NhcHRpb24+XG4gKiBjb25zdCByZXMgPSBnZW5lcmF0ZSgxLCB4ID0+IHggPCA1LCB4ID0+IHggKiAyLCB4ID0+IHggKyAxLCBhc2FwKTtcbiAqXG4gKiBAc2VlIHtAbGluayBmcm9tfVxuICogQHNlZSB7QGxpbmsgT2JzZXJ2YWJsZX1cbiAqXG4gKiBAcGFyYW0ge1N9IGluaXRpYWxTdGF0ZSBJbml0aWFsIHN0YXRlLlxuICogQHBhcmFtIHtmdW5jdGlvbiAoc3RhdGU6IFMpOiBib29sZWFufSBjb25kaXRpb24gQ29uZGl0aW9uIHRvIHRlcm1pbmF0ZSBnZW5lcmF0aW9uICh1cG9uIHJldHVybmluZyBmYWxzZSkuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uIChzdGF0ZTogUyk6IFN9IGl0ZXJhdGUgSXRlcmF0aW9uIHN0ZXAgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uIChzdGF0ZTogUyk6IFR9IHJlc3VsdFNlbGVjdG9yIFNlbGVjdG9yIGZ1bmN0aW9uIGZvciByZXN1bHRzIHByb2R1Y2VkIGluIHRoZSBzZXF1ZW5jZS4gKGRlcHJlY2F0ZWQpXG4gKiBAcGFyYW0ge1NjaGVkdWxlckxpa2V9IFtzY2hlZHVsZXJdIEEge0BsaW5rIFNjaGVkdWxlckxpa2V9IG9uIHdoaWNoIHRvIHJ1biB0aGUgZ2VuZXJhdG9yIGxvb3AuIElmIG5vdCBwcm92aWRlZCwgZGVmYXVsdHMgdG8gZW1pdCBpbW1lZGlhdGVseS5cbiAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPFQ+fSBUaGUgZ2VuZXJhdGVkIHNlcXVlbmNlLlxuICovXG4gIGV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZTxULCBTPihpbml0aWFsU3RhdGU6IFMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb246IENvbmRpdGlvbkZ1bmM8Uz4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlOiBJdGVyYXRlRnVuYzxTPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFNlbGVjdG9yOiBSZXN1bHRGdW5jPFMsIFQ+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVyPzogU2NoZWR1bGVyTGlrZSk6IE9ic2VydmFibGU8VD47XG5cbi8qKlxuICogR2VuZXJhdGVzIGFuIE9ic2VydmFibGUgYnkgcnVubmluZyBhIHN0YXRlLWRyaXZlbiBsb29wXG4gKiB0aGF0IGVtaXRzIGFuIGVsZW1lbnQgb24gZWFjaCBpdGVyYXRpb24uXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPlVzZSBpdCBpbnN0ZWFkIG9mIG5leHRpbmcgdmFsdWVzIGluIGEgZm9yIGxvb3AuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvZ2VuZXJhdGUucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogYGdlbmVyYXRlYCBhbGxvd3MgeW91IHRvIGNyZWF0ZSBzdHJlYW0gb2YgdmFsdWVzIGdlbmVyYXRlZCB3aXRoIGEgbG9vcCB2ZXJ5IHNpbWlsYXIgdG9cbiAqIHRyYWRpdGlvbmFsIGZvciBsb29wLiBGaXJzdCBhcmd1bWVudCBvZiBgZ2VuZXJhdGVgIGlzIGEgYmVnaW5uaW5nIHZhbHVlLiBTZWNvbmQgYXJndW1lbnRcbiAqIGlzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoaXMgdmFsdWUgYW5kIHRlc3RzIGlmIHNvbWUgY29uZGl0aW9uIHN0aWxsIGhvbGRzLiBJZiBpdCBkb2VzLFxuICogbG9vcCBjb250aW51ZXMsIGlmIG5vdCwgaXQgc3RvcHMuIFRoaXJkIHZhbHVlIGlzIGEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgcHJldmlvdXNseSBkZWZpbmVkXG4gKiB2YWx1ZSBhbmQgbW9kaWZpZXMgaXQgaW4gc29tZSB3YXkgb24gZWFjaCBpdGVyYXRpb24uIE5vdGUgaG93IHRoZXNlIHRocmVlIHBhcmFtZXRlcnNcbiAqIGFyZSBkaXJlY3QgZXF1aXZhbGVudHMgb2YgdGhyZWUgZXhwcmVzc2lvbnMgaW4gcmVndWxhciBmb3IgbG9vcDogZmlyc3QgZXhwcmVzc2lvblxuICogaW5pdGlhbGl6ZXMgc29tZSBzdGF0ZSAoZm9yIGV4YW1wbGUgbnVtZXJpYyBpbmRleCksIHNlY29uZCB0ZXN0cyBpZiBsb29wIGNhbiBtYWtlIG5leHRcbiAqIGl0ZXJhdGlvbiAoZm9yIGV4YW1wbGUgaWYgaW5kZXggaXMgbG93ZXIgdGhhbiAxMCkgYW5kIHRoaXJkIHN0YXRlcyBob3cgZGVmaW5lZCB2YWx1ZVxuICogd2lsbCBiZSBtb2RpZmllZCBvbiBldmVyeSBzdGVwIChpbmRleCB3aWxsIGJlIGluY3JlbWVudGVkIGJ5IG9uZSkuXG4gKlxuICogUmV0dXJuIHZhbHVlIG9mIGEgYGdlbmVyYXRlYCBvcGVyYXRvciBpcyBhbiBPYnNlcnZhYmxlIHRoYXQgb24gZWFjaCBsb29wIGl0ZXJhdGlvblxuICogZW1pdHMgYSB2YWx1ZS4gRmlyc3QsIGNvbmRpdGlvbiBmdW5jdGlvbiBpcyByYW4uIElmIGl0IHJldHVybmVkIHRydWUsIE9ic2VydmFibGVcbiAqIGVtaXRzIGN1cnJlbnRseSBzdG9yZWQgdmFsdWUgKGluaXRpYWwgdmFsdWUgYXQgdGhlIGZpcnN0IGl0ZXJhdGlvbikgYW5kIHRoZW4gdXBkYXRlc1xuICogdGhhdCB2YWx1ZSB3aXRoIGl0ZXJhdGUgZnVuY3Rpb24uIElmIGF0IHNvbWUgcG9pbnQgY29uZGl0aW9uIHJldHVybmVkIGZhbHNlLCBPYnNlcnZhYmxlXG4gKiBjb21wbGV0ZXMgYXQgdGhhdCBtb21lbnQuXG4gKlxuICogT3B0aW9uYWxseSB5b3UgY2FuIHBhc3MgZm91cnRoIHBhcmFtZXRlciB0byBgZ2VuZXJhdGVgIC0gYSByZXN1bHQgc2VsZWN0b3IgZnVuY3Rpb24gd2hpY2ggYWxsb3dzIHlvdVxuICogdG8gaW1tZWRpYXRlbHkgbWFwIHZhbHVlIHRoYXQgd291bGQgbm9ybWFsbHkgYmUgZW1pdHRlZCBieSBhbiBPYnNlcnZhYmxlLlxuICpcbiAqIElmIHlvdSBmaW5kIHRocmVlIGFub255bW91cyBmdW5jdGlvbnMgaW4gYGdlbmVyYXRlYCBjYWxsIGhhcmQgdG8gcmVhZCwgeW91IGNhbiBwcm92aWRlXG4gKiBzaW5nbGUgb2JqZWN0IHRvIHRoZSBvcGVyYXRvciBpbnN0ZWFkLiBUaGF0IG9iamVjdCBoYXMgcHJvcGVydGllczogYGluaXRpYWxTdGF0ZWAsXG4gKiBgY29uZGl0aW9uYCwgYGl0ZXJhdGVgIGFuZCBgcmVzdWx0U2VsZWN0b3JgLCB3aGljaCBzaG91bGQgaGF2ZSByZXNwZWN0aXZlIHZhbHVlcyB0aGF0IHlvdVxuICogd291bGQgbm9ybWFsbHkgcGFzcyB0byBgZ2VuZXJhdGVgLiBgcmVzdWx0U2VsZWN0b3JgIGlzIHN0aWxsIG9wdGlvbmFsLCBidXQgdGhhdCBmb3JtXG4gKiBvZiBjYWxsaW5nIGBnZW5lcmF0ZWAgYWxsb3dzIHlvdSB0byBvbWl0IGBjb25kaXRpb25gIGFzIHdlbGwuIElmIHlvdSBvbWl0IGl0LCB0aGF0IG1lYW5zXG4gKiBjb25kaXRpb24gYWx3YXlzIGhvbGRzLCBzbyBvdXRwdXQgT2JzZXJ2YWJsZSB3aWxsIG5ldmVyIGNvbXBsZXRlLlxuICpcbiAqIEJvdGggZm9ybXMgb2YgYGdlbmVyYXRlYCBjYW4gb3B0aW9uYWxseSBhY2NlcHQgYSBzY2hlZHVsZXIuIEluIGNhc2Ugb2YgbXVsdGktcGFyYW1ldGVyIGNhbGwsXG4gKiBzY2hlZHVsZXIgc2ltcGx5IGNvbWVzIGFzIGEgbGFzdCBhcmd1bWVudCAobm8gbWF0dGVyIGlmIHRoZXJlIGlzIHJlc3VsdFNlbGVjdG9yXG4gKiBmdW5jdGlvbiBvciBub3QpLiBJbiBjYXNlIG9mIHNpbmdsZS1wYXJhbWV0ZXIgY2FsbCwgeW91IGNhbiBwcm92aWRlIGl0IGFzIGFcbiAqIGBzY2hlZHVsZXJgIHByb3BlcnR5IG9uIG9iamVjdCBwYXNzZWQgdG8gdGhlIG9wZXJhdG9yLiBJbiBib3RoIGNhc2VzIHNjaGVkdWxlciBkZWNpZGVzIHdoZW5cbiAqIG5leHQgaXRlcmF0aW9uIG9mIHRoZSBsb29wIHdpbGwgaGFwcGVuIGFuZCB0aGVyZWZvcmUgd2hlbiBuZXh0IHZhbHVlIHdpbGwgYmUgZW1pdHRlZFxuICogYnkgdGhlIE9ic2VydmFibGUuIEZvciBleGFtcGxlIHRvIGVuc3VyZSB0aGF0IGVhY2ggdmFsdWUgaXMgcHVzaGVkIHRvIHRoZSBvYnNlcnZlclxuICogb24gc2VwYXJhdGUgdGFzayBpbiBldmVudCBsb29wLCB5b3UgY291bGQgdXNlIGBhc3luY2Agc2NoZWR1bGVyLiBOb3RlIHRoYXRcbiAqIGJ5IGRlZmF1bHQgKHdoZW4gbm8gc2NoZWR1bGVyIGlzIHBhc3NlZCkgdmFsdWVzIGFyZSBzaW1wbHkgZW1pdHRlZCBzeW5jaHJvbm91c2x5LlxuICpcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5Vc2Ugd2l0aCBjb25kaXRpb24gYW5kIGl0ZXJhdGUgZnVuY3Rpb25zLjwvY2FwdGlvbj5cbiAqIGNvbnN0IGdlbmVyYXRlZCA9IGdlbmVyYXRlKDAsIHggPT4geCA8IDMsIHggPT4geCArIDEpO1xuICpcbiAqIGdlbmVyYXRlZC5zdWJzY3JpYmUoXG4gKiAgIHZhbHVlID0+IGNvbnNvbGUubG9nKHZhbHVlKSxcbiAqICAgZXJyID0+IHt9LFxuICogICAoKSA9PiBjb25zb2xlLmxvZygnWW8hJylcbiAqICk7XG4gKlxuICogLy8gTG9nczpcbiAqIC8vIDBcbiAqIC8vIDFcbiAqIC8vIDJcbiAqIC8vIFwiWW8hXCJcbiAqXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+VXNlIHdpdGggY29uZGl0aW9uLCBpdGVyYXRlIGFuZCByZXN1bHRTZWxlY3RvciBmdW5jdGlvbnMuPC9jYXB0aW9uPlxuICogY29uc3QgZ2VuZXJhdGVkID0gZ2VuZXJhdGUoMCwgeCA9PiB4IDwgMywgeCA9PiB4ICsgMSwgeCA9PiB4ICogMTAwMCk7XG4gKlxuICogZ2VuZXJhdGVkLnN1YnNjcmliZShcbiAqICAgdmFsdWUgPT4gY29uc29sZS5sb2codmFsdWUpLFxuICogICBlcnIgPT4ge30sXG4gKiAgICgpID0+IGNvbnNvbGUubG9nKCdZbyEnKVxuICogKTtcbiAqXG4gKiAvLyBMb2dzOlxuICogLy8gMFxuICogLy8gMTAwMFxuICogLy8gMjAwMFxuICogLy8gXCJZbyFcIlxuICpcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5Vc2Ugd2l0aCBvcHRpb25zIG9iamVjdC48L2NhcHRpb24+XG4gKiBjb25zdCBnZW5lcmF0ZWQgPSBnZW5lcmF0ZSh7XG4gKiAgIGluaXRpYWxTdGF0ZTogMCxcbiAqICAgY29uZGl0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZSA8IDM7IH0sXG4gKiAgIGl0ZXJhdGUodmFsdWUpIHsgcmV0dXJuIHZhbHVlICsgMTsgfSxcbiAqICAgcmVzdWx0U2VsZWN0b3IodmFsdWUpIHsgcmV0dXJuIHZhbHVlICogMTAwMDsgfVxuICogfSk7XG4gKlxuICogZ2VuZXJhdGVkLnN1YnNjcmliZShcbiAqICAgdmFsdWUgPT4gY29uc29sZS5sb2codmFsdWUpLFxuICogICBlcnIgPT4ge30sXG4gKiAgICgpID0+IGNvbnNvbGUubG9nKCdZbyEnKVxuICogKTtcbiAqXG4gKiAvLyBMb2dzOlxuICogLy8gMFxuICogLy8gMTAwMFxuICogLy8gMjAwMFxuICogLy8gXCJZbyFcIlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlVzZSBvcHRpb25zIG9iamVjdCB3aXRob3V0IGNvbmRpdGlvbiBmdW5jdGlvbi48L2NhcHRpb24+XG4gKiBjb25zdCBnZW5lcmF0ZWQgPSBnZW5lcmF0ZSh7XG4gKiAgIGluaXRpYWxTdGF0ZTogMCxcbiAqICAgaXRlcmF0ZSh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgKyAxOyB9LFxuICogICByZXN1bHRTZWxlY3Rvcih2YWx1ZSkgeyByZXR1cm4gdmFsdWUgKiAxMDAwOyB9XG4gKiB9KTtcbiAqXG4gKiBnZW5lcmF0ZWQuc3Vic2NyaWJlKFxuICogICB2YWx1ZSA9PiBjb25zb2xlLmxvZyh2YWx1ZSksXG4gKiAgIGVyciA9PiB7fSxcbiAqICAgKCkgPT4gY29uc29sZS5sb2coJ1lvIScpIC8vIFRoaXMgd2lsbCBuZXZlciBydW4uXG4gKiApO1xuICpcbiAqIC8vIExvZ3M6XG4gKiAvLyAwXG4gKiAvLyAxMDAwXG4gKiAvLyAyMDAwXG4gKiAvLyAzMDAwXG4gKiAvLyAuLi5hbmQgbmV2ZXIgc3RvcHMuXG4gKlxuICpcbiAqIEBzZWUge0BsaW5rIGZyb219XG4gKiBAc2VlIHtAbGluayBpbmRleC9PYnNlcnZhYmxlLmNyZWF0ZX1cbiAqXG4gKiBAcGFyYW0ge1N9IGluaXRpYWxTdGF0ZSBJbml0aWFsIHN0YXRlLlxuICogQHBhcmFtIHtmdW5jdGlvbiAoc3RhdGU6IFMpOiBib29sZWFufSBjb25kaXRpb24gQ29uZGl0aW9uIHRvIHRlcm1pbmF0ZSBnZW5lcmF0aW9uICh1cG9uIHJldHVybmluZyBmYWxzZSkuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uIChzdGF0ZTogUyk6IFN9IGl0ZXJhdGUgSXRlcmF0aW9uIHN0ZXAgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uIChzdGF0ZTogUyk6IFR9IFtyZXN1bHRTZWxlY3Rvcl0gU2VsZWN0b3IgZnVuY3Rpb24gZm9yIHJlc3VsdHMgcHJvZHVjZWQgaW4gdGhlIHNlcXVlbmNlLlxuICogQHBhcmFtIHtTY2hlZHVsZXJ9IFtzY2hlZHVsZXJdIEEge0BsaW5rIFNjaGVkdWxlcn0gb24gd2hpY2ggdG8gcnVuIHRoZSBnZW5lcmF0b3IgbG9vcC4gSWYgbm90IHByb3ZpZGVkLCBkZWZhdWx0cyB0byBlbWl0dGluZyBpbW1lZGlhdGVseS5cbiAqIEByZXR1cm4ge09ic2VydmFibGU8VD59IFRoZSBnZW5lcmF0ZWQgc2VxdWVuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZTxTPihpbml0aWFsU3RhdGU6IFMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uOiBDb25kaXRpb25GdW5jPFM+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGU6IEl0ZXJhdGVGdW5jPFM+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlcj86IFNjaGVkdWxlckxpa2UpOiBPYnNlcnZhYmxlPFM+O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhbiBvYnNlcnZhYmxlIHNlcXVlbmNlIGJ5IHJ1bm5pbmcgYSBzdGF0ZS1kcml2ZW4gbG9vcFxuICogcHJvZHVjaW5nIHRoZSBzZXF1ZW5jZSdzIGVsZW1lbnRzLCB1c2luZyB0aGUgc3BlY2lmaWVkIHNjaGVkdWxlclxuICogdG8gc2VuZCBvdXQgb2JzZXJ2ZXIgbWVzc2FnZXMuXG4gKiBUaGUgb3ZlcmxvYWQgYWNjZXB0cyBvcHRpb25zIG9iamVjdCB0aGF0IG1pZ2h0IGNvbnRhaW4gaW5pdGlhbCBzdGF0ZSwgaXRlcmF0ZSxcbiAqIGNvbmRpdGlvbiBhbmQgc2NoZWR1bGVyLlxuICpcbiAqICFbXShnZW5lcmF0ZS5wbmcpXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+UHJvZHVjZXMgc2VxdWVuY2Ugb2YgMCwgMSwgMiwgLi4uIDksIHRoZW4gY29tcGxldGVzLjwvY2FwdGlvbj5cbiAqIGNvbnN0IHJlcyA9IGdlbmVyYXRlKHtcbiAqICAgaW5pdGlhbFN0YXRlOiAwLFxuICogICBjb25kaXRpb246IHggPT4geCA8IDEwLFxuICogICBpdGVyYXRlOiB4ID0+IHggKyAxLFxuICogfSk7XG4gKlxuICogQHNlZSB7QGxpbmsgZnJvbX1cbiAqIEBzZWUge0BsaW5rIE9ic2VydmFibGV9XG4gKlxuICogQHBhcmFtIHtHZW5lcmF0ZUJhc2VPcHRpb25zPFM+fSBvcHRpb25zIE9iamVjdCB0aGF0IG11c3QgY29udGFpbiBpbml0aWFsU3RhdGUsIGl0ZXJhdGUgYW5kIG1pZ2h0IGNvbnRhaW4gY29uZGl0aW9uIGFuZCBzY2hlZHVsZXIuXG4gKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxTPn0gVGhlIGdlbmVyYXRlZCBzZXF1ZW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlPFM+KG9wdGlvbnM6IEdlbmVyYXRlQmFzZU9wdGlvbnM8Uz4pOiBPYnNlcnZhYmxlPFM+O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhbiBvYnNlcnZhYmxlIHNlcXVlbmNlIGJ5IHJ1bm5pbmcgYSBzdGF0ZS1kcml2ZW4gbG9vcFxuICogcHJvZHVjaW5nIHRoZSBzZXF1ZW5jZSdzIGVsZW1lbnRzLCB1c2luZyB0aGUgc3BlY2lmaWVkIHNjaGVkdWxlclxuICogdG8gc2VuZCBvdXQgb2JzZXJ2ZXIgbWVzc2FnZXMuXG4gKiBUaGUgb3ZlcmxvYWQgYWNjZXB0cyBvcHRpb25zIG9iamVjdCB0aGF0IG1pZ2h0IGNvbnRhaW4gaW5pdGlhbCBzdGF0ZSwgaXRlcmF0ZSxcbiAqIGNvbmRpdGlvbiwgcmVzdWx0IHNlbGVjdG9yIGFuZCBzY2hlZHVsZXIuXG4gKlxuICogIVtdKGdlbmVyYXRlLnBuZylcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5Qcm9kdWNlcyBzZXF1ZW5jZSBvZiAwLCAxLCAyLCAuLi4gOSwgdGhlbiBjb21wbGV0ZXMuPC9jYXB0aW9uPlxuICogY29uc3QgcmVzID0gZ2VuZXJhdGUoe1xuICogICBpbml0aWFsU3RhdGU6IDAsXG4gKiAgIGNvbmRpdGlvbjogeCA9PiB4IDwgMTAsXG4gKiAgIGl0ZXJhdGU6IHggPT4geCArIDEsXG4gKiAgIHJlc3VsdFNlbGVjdG9yOiB4ID0+IHgsXG4gKiB9KTtcbiAqXG4gKiBAc2VlIHtAbGluayBmcm9tfVxuICogQHNlZSB7QGxpbmsgT2JzZXJ2YWJsZX1cbiAqXG4gKiBAcGFyYW0ge0dlbmVyYXRlT3B0aW9uczxULCBTPn0gb3B0aW9ucyBPYmplY3QgdGhhdCBtdXN0IGNvbnRhaW4gaW5pdGlhbFN0YXRlLCBpdGVyYXRlLCByZXN1bHRTZWxlY3RvciBhbmQgbWlnaHQgY29udGFpbiBjb25kaXRpb24gYW5kIHNjaGVkdWxlci5cbiAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPFQ+fSBUaGUgZ2VuZXJhdGVkIHNlcXVlbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGU8VCwgUz4ob3B0aW9uczogR2VuZXJhdGVPcHRpb25zPFQsIFM+KTogT2JzZXJ2YWJsZTxUPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlPFQsIFM+KGluaXRpYWxTdGF0ZU9yT3B0aW9uczogUyB8IEdlbmVyYXRlT3B0aW9uczxULCBTPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24/OiBDb25kaXRpb25GdW5jPFM+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGU/OiBJdGVyYXRlRnVuYzxTPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZT86IChSZXN1bHRGdW5jPFMsIFQ+KSB8IFNjaGVkdWxlckxpa2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVyPzogU2NoZWR1bGVyTGlrZSk6IE9ic2VydmFibGU8VD4ge1xuXG4gIGxldCByZXN1bHRTZWxlY3RvcjogUmVzdWx0RnVuYzxTLCBUPjtcbiAgbGV0IGluaXRpYWxTdGF0ZTogUztcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGluaXRpYWxTdGF0ZU9yT3B0aW9ucyBhcyBHZW5lcmF0ZU9wdGlvbnM8VCwgUz47XG4gICAgaW5pdGlhbFN0YXRlID0gb3B0aW9ucy5pbml0aWFsU3RhdGU7XG4gICAgY29uZGl0aW9uID0gb3B0aW9ucy5jb25kaXRpb247XG4gICAgaXRlcmF0ZSA9IG9wdGlvbnMuaXRlcmF0ZTtcbiAgICByZXN1bHRTZWxlY3RvciA9IG9wdGlvbnMucmVzdWx0U2VsZWN0b3IgfHwgaWRlbnRpdHkgYXMgUmVzdWx0RnVuYzxTLCBUPjtcbiAgICBzY2hlZHVsZXIgPSBvcHRpb25zLnNjaGVkdWxlcjtcbiAgfSBlbHNlIGlmIChyZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZSA9PT0gdW5kZWZpbmVkIHx8IGlzU2NoZWR1bGVyKHJlc3VsdFNlbGVjdG9yT3JPYnNlcnZhYmxlKSkge1xuICAgIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZU9yT3B0aW9ucyBhcyBTO1xuICAgIHJlc3VsdFNlbGVjdG9yID0gaWRlbnRpdHkgYXMgUmVzdWx0RnVuYzxTLCBUPjtcbiAgICBzY2hlZHVsZXIgPSByZXN1bHRTZWxlY3Rvck9yT2JzZXJ2YWJsZSBhcyBTY2hlZHVsZXJMaWtlO1xuICB9IGVsc2Uge1xuICAgIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZU9yT3B0aW9ucyBhcyBTO1xuICAgIHJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3JPck9ic2VydmFibGUgYXMgUmVzdWx0RnVuYzxTLCBUPjtcbiAgfVxuXG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxUPihzdWJzY3JpYmVyID0+IHtcbiAgICBsZXQgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZTxTY2hlZHVsZXJTdGF0ZTxULCBTPj4oZGlzcGF0Y2gsIDAsIHtcbiAgICAgICAgc3Vic2NyaWJlcixcbiAgICAgICAgaXRlcmF0ZSxcbiAgICAgICAgY29uZGl0aW9uLFxuICAgICAgICByZXN1bHRTZWxlY3RvcixcbiAgICAgICAgc3RhdGVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGRvIHtcbiAgICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgbGV0IGNvbmRpdGlvblJlc3VsdDogYm9vbGVhbjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25kaXRpb25SZXN1bHQgPSBjb25kaXRpb24oc3RhdGUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbmRpdGlvblJlc3VsdCkge1xuICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHZhbHVlOiBUO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWUgPSByZXN1bHRTZWxlY3RvcihzdGF0ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHN0YXRlID0gaXRlcmF0ZShzdGF0ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKHRydWUpO1xuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoPFQsIFM+KHRoaXM6IFNjaGVkdWxlckFjdGlvbjxTY2hlZHVsZXJTdGF0ZTxULCBTPj4sIHN0YXRlOiBTY2hlZHVsZXJTdGF0ZTxULCBTPikge1xuICBjb25zdCB7IHN1YnNjcmliZXIsIGNvbmRpdGlvbiB9ID0gc3RhdGU7XG4gIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKHN0YXRlLm5lZWRJdGVyYXRlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHN0YXRlLnN0YXRlID0gc3RhdGUuaXRlcmF0ZShzdGF0ZS5zdGF0ZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5uZWVkSXRlcmF0ZSA9IHRydWU7XG4gIH1cbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIGxldCBjb25kaXRpb25SZXN1bHQ6IGJvb2xlYW47XG4gICAgdHJ5IHtcbiAgICAgIGNvbmRpdGlvblJlc3VsdCA9IGNvbmRpdGlvbihzdGF0ZS5zdGF0ZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvblJlc3VsdCkge1xuICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBsZXQgdmFsdWU6IFQ7XG4gIHRyeSB7XG4gICAgdmFsdWUgPSBzdGF0ZS5yZXN1bHRTZWxlY3RvcihzdGF0ZS5zdGF0ZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gdGhpcy5zY2hlZHVsZShzdGF0ZSk7XG59XG4iXX0=