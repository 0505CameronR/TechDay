/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { patchMacroTask } from '../common/utils';
Zone.__load_patch('fs', () => {
    let fs;
    try {
        fs = require('fs');
    }
    catch (err) {
    }
    // watch, watchFile, unwatchFile has been patched
    // because EventEmitter has been patched
    const TO_PATCH_MACROTASK_METHODS = [
        'access', 'appendFile', 'chmod', 'chown', 'close', 'exists', 'fchmod',
        'fchown', 'fdatasync', 'fstat', 'fsync', 'ftruncate', 'futimes', 'lchmod',
        'lchown', 'link', 'lstat', 'mkdir', 'mkdtemp', 'open', 'read',
        'readdir', 'readFile', 'readlink', 'realpath', 'rename', 'rmdir', 'stat',
        'symlink', 'truncate', 'unlink', 'utimes', 'write', 'writeFile',
    ];
    if (fs) {
        TO_PATCH_MACROTASK_METHODS.filter(name => !!fs[name] && typeof fs[name] === 'function')
            .forEach(name => {
            patchMacroTask(fs, name, (self, args) => {
                return {
                    name: 'fs.' + name,
                    args: args,
                    cbIdx: args.length > 0 ? args.length - 1 : -1,
                    target: self
                };
            });
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wbGF0Zm9ybXMvaW9zL1R1bWFpbmlGdW5kL2FwcC90bnNfbW9kdWxlcy96b25lLmpzL2xpYi9ub2RlL2ZzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7SUFDM0IsSUFBSSxFQUFPLENBQUM7SUFDWixJQUFJO1FBQ0YsRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNwQjtJQUFDLE9BQU8sR0FBRyxFQUFFO0tBQ2I7SUFFRCxpREFBaUQ7SUFDakQsd0NBQXdDO0lBQ3hDLE1BQU0sMEJBQTBCLEdBQUc7UUFDakMsUUFBUSxFQUFHLFlBQVksRUFBRSxPQUFPLEVBQUssT0FBTyxFQUFLLE9BQU8sRUFBTSxRQUFRLEVBQUssUUFBUTtRQUNuRixRQUFRLEVBQUcsV0FBVyxFQUFHLE9BQU8sRUFBSyxPQUFPLEVBQUssV0FBVyxFQUFFLFNBQVMsRUFBSSxRQUFRO1FBQ25GLFFBQVEsRUFBRyxNQUFNLEVBQVEsT0FBTyxFQUFLLE9BQU8sRUFBSyxTQUFTLEVBQUksTUFBTSxFQUFPLE1BQU07UUFDakYsU0FBUyxFQUFFLFVBQVUsRUFBSSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBSyxPQUFPLEVBQU0sTUFBTTtRQUNqRixTQUFTLEVBQUUsVUFBVSxFQUFJLFFBQVEsRUFBSSxRQUFRLEVBQUksT0FBTyxFQUFNLFdBQVc7S0FDMUUsQ0FBQztJQUVGLElBQUksRUFBRSxFQUFFO1FBQ04sMEJBQTBCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLENBQUM7YUFDbEYsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2QsY0FBYyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFTLEVBQUUsSUFBVyxFQUFFLEVBQUU7Z0JBQ2xELE9BQU87b0JBQ0wsSUFBSSxFQUFFLEtBQUssR0FBRyxJQUFJO29CQUNsQixJQUFJLEVBQUUsSUFBSTtvQkFDVixLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdDLE1BQU0sRUFBRSxJQUFJO2lCQUNiLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0tBQ1I7QUFDSCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtwYXRjaE1hY3JvVGFza30gZnJvbSAnLi4vY29tbW9uL3V0aWxzJztcblxuWm9uZS5fX2xvYWRfcGF0Y2goJ2ZzJywgKCkgPT4ge1xuICBsZXQgZnM6IGFueTtcbiAgdHJ5IHtcbiAgICBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICB9XG5cbiAgLy8gd2F0Y2gsIHdhdGNoRmlsZSwgdW53YXRjaEZpbGUgaGFzIGJlZW4gcGF0Y2hlZFxuICAvLyBiZWNhdXNlIEV2ZW50RW1pdHRlciBoYXMgYmVlbiBwYXRjaGVkXG4gIGNvbnN0IFRPX1BBVENIX01BQ1JPVEFTS19NRVRIT0RTID0gW1xuICAgICdhY2Nlc3MnLCAgJ2FwcGVuZEZpbGUnLCAnY2htb2QnLCAgICAnY2hvd24nLCAgICAnY2xvc2UnLCAgICAgJ2V4aXN0cycsICAgICdmY2htb2QnLFxuICAgICdmY2hvd24nLCAgJ2ZkYXRhc3luYycsICAnZnN0YXQnLCAgICAnZnN5bmMnLCAgICAnZnRydW5jYXRlJywgJ2Z1dGltZXMnLCAgICdsY2htb2QnLFxuICAgICdsY2hvd24nLCAgJ2xpbmsnLCAgICAgICAnbHN0YXQnLCAgICAnbWtkaXInLCAgICAnbWtkdGVtcCcsICAgJ29wZW4nLCAgICAgICdyZWFkJyxcbiAgICAncmVhZGRpcicsICdyZWFkRmlsZScsICAgJ3JlYWRsaW5rJywgJ3JlYWxwYXRoJywgJ3JlbmFtZScsICAgICdybWRpcicsICAgICAnc3RhdCcsXG4gICAgJ3N5bWxpbmsnLCAndHJ1bmNhdGUnLCAgICd1bmxpbmsnLCAgICd1dGltZXMnLCAgICd3cml0ZScsICAgICAnd3JpdGVGaWxlJyxcbiAgXTtcblxuICBpZiAoZnMpIHtcbiAgICBUT19QQVRDSF9NQUNST1RBU0tfTUVUSE9EUy5maWx0ZXIobmFtZSA9PiAhIWZzW25hbWVdICYmIHR5cGVvZiBmc1tuYW1lXSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgICAgcGF0Y2hNYWNyb1Rhc2soZnMsIG5hbWUsIChzZWxmOiBhbnksIGFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBuYW1lOiAnZnMuJyArIG5hbWUsXG4gICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgIGNiSWR4OiBhcmdzLmxlbmd0aCA+IDAgPyBhcmdzLmxlbmd0aCAtIDEgOiAtMSxcbiAgICAgICAgICAgICAgdGFyZ2V0OiBzZWxmXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgfVxufSk7XG4iXX0=