import { fromArray } from '../observable/fromArray';
import { scalar } from '../observable/scalar';
import { empty } from '../observable/empty';
import { concat as concatStatic } from '../observable/concat';
import { isScheduler } from '../util/isScheduler';
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <span class="informal">First emits its arguments in order, and then any
 * emissions from the source.</span>
 *
 * ![](startWith.png)
 *
 * ## Examples
 *
 * Start the chain of emissions with `"first"`, `"second"`
 *
 * ```javascript
 * import { of } from 'rxjs';
 * import { startWith } from 'rxjs/operators';
 *
 * of("from source")
 *   .pipe(startWith("first", "second"))
 *   .subscribe(x => console.log(x));
 *
 * // results:
 * //   "first"
 * //   "second"
 * //   "from source"
 * ```
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {SchedulerLike} [scheduler] - A {@link SchedulerLike} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */
export function startWith(...array) {
    return (source) => {
        let scheduler = array[array.length - 1];
        if (isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        const len = array.length;
        if (len === 1 && !scheduler) {
            return concatStatic(scalar(array[0]), source);
        }
        else if (len > 0) {
            return concatStatic(fromArray(array, scheduler), source);
        }
        else {
            return concatStatic(empty(scheduler), source);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnRXaXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGxhdGZvcm1zL2lvcy9UdW1haW5pRnVuZC9hcHAvdG5zX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL3N0YXJ0V2l0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsTUFBTSxJQUFJLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVlsRCxtQ0FBbUM7QUFFbkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQ0c7QUFDSCxNQUFNLFVBQVUsU0FBUyxDQUFPLEdBQUcsS0FBK0I7SUFDaEUsT0FBTyxDQUFDLE1BQXFCLEVBQUUsRUFBRTtRQUMvQixJQUFJLFNBQVMsR0FBa0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkQsSUFBSSxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDMUIsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ2I7YUFBTTtZQUNMLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDbEI7UUFFRCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ3pCLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUMzQixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBTSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDcEQ7YUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxZQUFZLENBQUMsU0FBUyxDQUFDLEtBQVksRUFBRSxTQUFTLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNqRTthQUFNO1lBQ0wsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQy9DO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGZyb21BcnJheSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbUFycmF5JztcbmltcG9ydCB7IHNjYWxhciB9IGZyb20gJy4uL29ic2VydmFibGUvc2NhbGFyJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9lbXB0eSc7XG5pbXBvcnQgeyBjb25jYXQgYXMgY29uY2F0U3RhdGljIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9jb25jYXQnO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmltcG9ydCB7IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbiwgT3BlcmF0b3JGdW5jdGlvbiwgU2NoZWR1bGVyTGlrZSB9IGZyb20gJy4uL3R5cGVzJztcblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRXaXRoPFQ+KHNjaGVkdWxlcj86IFNjaGVkdWxlckxpa2UpOiBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb248VD47XG5leHBvcnQgZnVuY3Rpb24gc3RhcnRXaXRoPFQsIEQgPSBUPih2MTogRCwgc2NoZWR1bGVyPzogU2NoZWR1bGVyTGlrZSk6IE9wZXJhdG9yRnVuY3Rpb248VCwgVCB8IEQ+O1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aDxULCBEID0gVCwgRSA9IFQ+KHYxOiBELCB2MjogRSwgc2NoZWR1bGVyPzogU2NoZWR1bGVyTGlrZSk6IE9wZXJhdG9yRnVuY3Rpb248VCwgVCB8IEQgfCBFPjtcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdpdGg8VCwgRCA9IFQsIEUgPSBULCBGID0gVD4odjE6IEQsIHYyOiBFLCB2MzogRiwgc2NoZWR1bGVyPzogU2NoZWR1bGVyTGlrZSk6IE9wZXJhdG9yRnVuY3Rpb248VCwgVCB8IEQgfCBFIHwgRj47XG5leHBvcnQgZnVuY3Rpb24gc3RhcnRXaXRoPFQsIEQgPSBULCBFID0gVCwgRiA9IFQsIEcgPSBUPih2MTogRCwgdjI6ICBFLCB2MzogRiwgdjQ6IEcsIHNjaGVkdWxlcj86IFNjaGVkdWxlckxpa2UpOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFQgfCBEIHwgRSB8IEYgfCBHPjtcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdpdGg8VCwgRCA9IFQsIEUgPSBULCBGID0gVCwgRyA9IFQsIEggPSBUPih2MTogRCwgdjI6IEUsIHYzOiBGLCB2NDogRywgdjU6IEgsIHNjaGVkdWxlcj86IFNjaGVkdWxlckxpa2UpOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFQgfCBEIHwgRSB8IEYgfCBHIHwgSD47XG5leHBvcnQgZnVuY3Rpb24gc3RhcnRXaXRoPFQsIEQgPSBULCBFID0gVCwgRiA9IFQsIEcgPSBULCBIID0gVCwgSSA9IFQ+KHYxOiBELCB2MjogRSwgdjM6IEYsIHY0OiBHLCB2NTogSCwgdjY6IEksIHNjaGVkdWxlcj86IFNjaGVkdWxlckxpa2UpOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFQgfCBEIHwgRSB8IEYgfCBHIHwgSCB8IEk+O1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aDxULCBEID0gVD4oLi4uYXJyYXk6IEFycmF5PEQgfCBTY2hlZHVsZXJMaWtlPik6IE9wZXJhdG9yRnVuY3Rpb248VCwgVCB8IEQ+O1xuLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgaXRlbXMgeW91IHNwZWNpZnkgYXMgYXJndW1lbnRzIGJlZm9yZSBpdCBiZWdpbnMgdG8gZW1pdFxuICogaXRlbXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkZpcnN0IGVtaXRzIGl0cyBhcmd1bWVudHMgaW4gb3JkZXIsIGFuZCB0aGVuIGFueVxuICogZW1pc3Npb25zIGZyb20gdGhlIHNvdXJjZS48L3NwYW4+XG4gKlxuICogIVtdKHN0YXJ0V2l0aC5wbmcpXG4gKlxuICogIyMgRXhhbXBsZXNcbiAqXG4gKiBTdGFydCB0aGUgY2hhaW4gb2YgZW1pc3Npb25zIHdpdGggYFwiZmlyc3RcImAsIGBcInNlY29uZFwiYFxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG4gKiBpbXBvcnQgeyBzdGFydFdpdGggfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG4gKlxuICogb2YoXCJmcm9tIHNvdXJjZVwiKVxuICogICAucGlwZShzdGFydFdpdGgoXCJmaXJzdFwiLCBcInNlY29uZFwiKSlcbiAqICAgLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiAvLyByZXN1bHRzOlxuICogLy8gICBcImZpcnN0XCJcbiAqIC8vICAgXCJzZWNvbmRcIlxuICogLy8gICBcImZyb20gc291cmNlXCJcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Li4uVH0gdmFsdWVzIC0gSXRlbXMgeW91IHdhbnQgdGhlIG1vZGlmaWVkIE9ic2VydmFibGUgdG8gZW1pdCBmaXJzdC5cbiAqIEBwYXJhbSB7U2NoZWR1bGVyTGlrZX0gW3NjaGVkdWxlcl0gLSBBIHtAbGluayBTY2hlZHVsZXJMaWtlfSB0byB1c2UgZm9yIHNjaGVkdWxpbmdcbiAqIHRoZSBlbWlzc2lvbnMgb2YgdGhlIGBuZXh0YCBub3RpZmljYXRpb25zLlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBpdGVtcyBpbiB0aGUgc3BlY2lmaWVkIEl0ZXJhYmxlIGFuZCB0aGVuIGVtaXRzIHRoZSBpdGVtc1xuICogZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAbWV0aG9kIHN0YXJ0V2l0aFxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0V2l0aDxULCBEPiguLi5hcnJheTogQXJyYXk8VCB8IFNjaGVkdWxlckxpa2U+KTogT3BlcmF0b3JGdW5jdGlvbjxULCBUIHwgRD4ge1xuICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxUPikgPT4ge1xuICAgIGxldCBzY2hlZHVsZXIgPSA8U2NoZWR1bGVyTGlrZT5hcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICBpZiAoaXNTY2hlZHVsZXIoc2NoZWR1bGVyKSkge1xuICAgICAgYXJyYXkucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlciA9IG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgbGVuID0gYXJyYXkubGVuZ3RoO1xuICAgIGlmIChsZW4gPT09IDEgJiYgIXNjaGVkdWxlcikge1xuICAgICAgcmV0dXJuIGNvbmNhdFN0YXRpYyhzY2FsYXIoYXJyYXlbMF0gYXMgVCksIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmIChsZW4gPiAwKSB7XG4gICAgICByZXR1cm4gY29uY2F0U3RhdGljKGZyb21BcnJheShhcnJheSBhcyBUW10sIHNjaGVkdWxlciksIHNvdXJjZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjb25jYXRTdGF0aWMoZW1wdHkoc2NoZWR1bGVyKSwgc291cmNlKTtcbiAgICB9XG4gIH07XG59XG4iXX0=